const interval = 1000;

export function fetchPure() {
  const base = new Date().getTime();
  const latlngs1 = [
      [47.282423 , -1.519942],
      [47.282446 , -1.519904],
      [47.282446 , -1.519904],
      [47.282504 , -1.519817],
      [47.282549 , -1.519736],
      [47.282549 , -1.519736],
      [47.282580 , -1.519654],
      [47.282580 , -1.519654],
      [47.282611 , -1.519589],
      [47.282619 , -1.519535],
      [47.282619 , -1.519535],
      [47.282591 , -1.519446],
      [47.282591 , -1.519446],
      [47.282585 , -1.519337],
      [47.282585 , -1.519337],
      [47.282585 , -1.519337],
      [47.282553 , -1.519256],
      [47.282553 , -1.519256],
      [47.282534 , -1.519159],
      [47.282534 , -1.519159],
      [47.282506 , -1.519073],
      [47.282506 , -1.519073],
      [47.282490 , -1.518990],
      [47.282473 , -1.518896],
      [47.282473 , -1.518896],
      [47.282467 , -1.518800],
      [47.282452 , -1.518707],
      [47.282439 , -1.518637],
      [47.282439 , -1.518637],
      [47.282423 , -1.518568],
      [47.282409 , -1.518490],
      [47.282417 , -1.518477],
      [47.282436 , -1.518512],
      [47.282501 , -1.518666],
      [47.282501 , -1.518666],
      [47.282554 , -1.518753],
      [47.282554 , -1.518753],
      [47.282609 , -1.518804],
      [47.282713 , -1.518944],
      [47.282693 , -1.519009],
      [47.282662 , -1.519123],
    ];
  const timestamp1 = generate(latlngs1.length, base);



  const latlngs2 = [
    [47.282279, -1.520027],
    [47.282299, -1.520019],
    [47.282303, -1.520012],
    [47.282317, -1.519982],
    [47.282337, -1.519941],
    [47.282354, -1.519914],
    [47.282374, -1.519871],
    [47.282394, -1.519808],
    [47.282406, -1.519771],
    [47.282432, -1.519712],
    [47.282444, -1.519682],
    [47.282461, -1.519670],
    [47.282457, -1.519642],
    [47.282454, -1.519600],
    [47.282457, -1.519554],
    [47.282465, -1.519521],
    [47.282465, -1.519507],
    [47.282457, -1.519514],
    [47.282472, -1.519475],
    [47.282475, -1.519450],
    [47.282480, -1.519424],
    [47.282490, -1.519399],
    [47.282508, -1.519328],
    [47.282511, -1.519286],
    [47.282511, -1.519245],
    [47.282507, -1.519209],
    [47.282498, -1.519130],
    [47.282494, -1.519096],
    [47.282486, -1.519044],
    [47.282478, -1.519005],
    [47.282473, -1.518969],
    [47.282462, -1.518909],
    [47.282446, -1.518866],
    [47.282435, -1.518821],
    [47.282422, -1.518759],
    [47.282413, -1.518679],
    [47.282417, -1.518653],
    [47.282422, -1.518607],
    [47.282424, -1.518582],
    [47.282415, -1.518541],
    [47.282409, -1.518518],
    [47.282409, -1.518489],
    [47.282448, -1.518483],
    [47.282471, -1.518502],
    [47.282491, -1.518533],
    [47.282503, -1.518561],
    [47.282520, -1.518602],
    [47.282533, -1.518630],
    [47.282550, -1.518662],
    [47.282576, -1.518712],
    [47.282592, -1.518738],
    [47.282603, -1.518764],
    [47.282629, -1.518806],
    [47.282662, -1.518874],
    [47.282671, -1.518903],
    [47.282686, -1.518927],
    [47.282692, -1.518967],
    [47.282693, -1.519003],
    [47.282693, -1.519040],
    [47.282692, -1.519074],
    [47.282682, -1.519126],
    [47.282671, -1.519156],
    [47.282657, -1.519187],
    [47.282634, -1.519233],
    [47.282619, -1.519272],
    [47.282603, -1.519303],
    [47.282584, -1.519351],
    [47.282572, -1.519381],
    [47.282561, -1.519413],
    [47.282543, -1.519460],
    [47.282537, -1.519487],
    [47.282512, -1.519531],
    [47.282488, -1.519575],
    [47.282469, -1.519605],
    [47.282461, -1.519634],
    [47.282456, -1.519686],
    [47.282455, -1.519715],
    [47.282452, -1.519746],
    [47.282435, -1.519783],
    [47.282421, -1.519803],
    [47.282405, -1.519818],
    [47.282385, -1.519838],
    [47.282374, -1.519854],
    [47.282364, -1.519880],
    [47.282342, -1.519916],
    [47.282333, -1.519949],
    [47.282319, -1.519990],
    [47.282296, -1.520030],
    [47.282270, -1.520078],
    [47.282243, -1.520146],
    [47.282228, -1.520194],
    [47.282214, -1.520219],
    [47.282198, -1.520281],
    [47.282184, -1.520327],
    [47.282165, -1.520367],
    [47.282150, -1.520387],
    [47.282138, -1.520398],
    [47.282121, -1.520416],
    [47.282109, -1.520420],
    [47.282105, -1.520462],
    [47.282096, -1.520475],
    [47.282085, -1.520471]
  ];
  const timestamp2 = generate(latlngs2.length, base);
  return [
    {
      latlngs: latlngs1,
      times: timestamp1,
      vitesse: calculVitesse(latlngs1),
      color: "blue"
    },
    {
      latlngs: latlngs2,
      times: timestamp2,
      vitesse: calculVitesse(latlngs2),
      color: "red"
    }
  ]
}

const generate = (size, base) => {
  const res = [];
  for (let i = 0; i < size; i++) {
    res.push(base + (interval*i));
  }
  return res;
}

const calculVitesse = (latlngs) => {
  const distances = []; // distance depuis le dernier point geographique
  distances.push(0);
  const R = 6378137;
  for (let i = 1; i < latlngs.length; i++) {
    const lat1 = degToRad(latlngs[0][0]);
    const lon1 = degToRad(latlngs[0][1]);
    const lat2 = degToRad(latlngs[1][0]);
    const lon2 = degToRad(latlngs[1][1]);

    const dlon = (lon2 - lon1) / 2;
    const dlat = (lat2 - lat1) / 2;
    const a = (Math.sin(dlat) * Math.sin(dlat)) + Math.cos(lat1) * Math.cos(lat2) * (Math.sin(dlon) * Math.sin(dlon));
    const d = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    distances.push(d * R);
  }

  const vitesse = []; // vitesse moyenne entre le dernier point
  vitesse.push(0); // v = d/t;
  distances.forEach(d => vitesse.push(d/interval))
  return vitesse;
}

const degToRad = (deg) => {
  return deg * (Math.PI / 180);
}
